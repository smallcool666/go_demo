package main

import (
	"fmt"
	"os"
)
/*
	变量声明的一般语法如下：
			var 变量名字 类型 = 表达式
		其中“类型”或“= 表达式”两个部分可以省略其中的一个。如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息。如果初始化表达式被省略，那么将用零值初始化该变量。
			数值类型变量对应的零值是0；
			布尔类型变量对应的零值是false；
			字符串类型对应的零值是空字符串；
			接口或引用类型（包括slice、map、chan和函数）变量对应的零值是nil；
			数组或结构体等聚合类型对应的零值是每个元素或字段都是对应该类型的零值。
	零值初始化机制可以确保每个声明的变量总是有一个良好定义的值，因此在Go语言中不存在未初始化的变量。

	变量声明方式
	1.一般语法声明，如：var s string
	2.在一个声明语句中同时声明一组变量，如：var i, j, k int
	3.用一组初始化表达式声明并初始化一组变量（省略变量类型，可以声明多个类型不同的变量，由初始化表达式推导），
		如：var b, f, s = true, 2.3, "four" // bool, float64, string
	4.一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化，如：var f, err = os.Open(name)
	5.简短变量声明
		语法格式为：名字 := 表达式
		简短变量声明注意点：
			“:=”是一个变量声明语句，而“=”是一个变量赋值操作
			简短变量声明左边的变量可能并不是全部都是刚刚声明的。如果有一些已经在相同的词法域声明过了，那么简短变量声明语句对这些已经声明过的变量就只有赋值行为了
			***简短变量声明语句中必须至少要声明一个新的变量
			简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量

*/
func main() {
	//一般语法声明变量
	var str string
	fmt.Println(str) //""
	//在一个声明语句中同时声明一组变量
	var i, j, k int
	fmt.Println(i, j, k)//0 0 0
	//用一组初始化表达式声明并初始化一组变量
	var a, b, c = true, 2.3, "four"
	fmt.Printf("%T, %T, %T", a, b, c)// bool, float64, string
	//通过调用一个函数，由函数返回的多个返回值初始化一组变量
	var f, err = os.Open("")
	fmt.Println(f, err)

	//简短变量声明
	t := 0.0
	//简短变量声明语句也可以用来声明和初始化一组变量
	d, e := 0, 1
	//简短变量声明语句也可以用函数的返回值来声明和初始化变量
	file, error := os.Open("")
	//简短变量声明语句中必须至少要声明一个新的变量
	//file, error := os.Open("") // compile error: no new variables
	fmt.Println(t, d, e, file, error)
}
